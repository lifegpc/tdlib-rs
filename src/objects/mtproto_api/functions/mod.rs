use crate::objects::traits::TypeId;
use bytes::BytesMut;
use rand::{Rng, SeedableRng};

#[derive(Clone, Debug, tdlib_rs_impl::Serialize)]
/// The first step to [DH exchange initiation](https://core.telegram.org/mtproto/auth_key#dh-exchange-initiation)
///
/// Origin: `req_pq_multi#be7e8ef1 nonce:int128 = ResPQ;`
pub struct req_pq_multi {
    /// Selected randomly by the client (random number) and identifies the client within this communication
    pub nonce: i128,
}

impl req_pq_multi {
    /// Create a new instance.
    pub fn new() -> Self {
        Self {
            nonce: rand::rngs::StdRng::from_entropy().gen(),
        }
    }
}

impl TypeId for req_pq_multi {
    fn type_id2() -> u32 {
        0xbe7e8ef1
    }
}

#[derive(Clone, Debug, tdlib_rs_impl::Serialize)]
/// Used to start Diffie-Hellman key exchange. [More](https://core.telegram.org/mtproto/auth_key#presenting-proof-of-work-server-authentication)
/// 
/// Origin: `req_DH_params#d712e4be nonce:int128 server_nonce:int128 p:string q:string public_key_fingerprint:long encrypted_data:string = Server_DH_Params;`
pub struct req_DH_params {
    /// Value generated by client in [Step 1](https://core.telegram.org/mtproto/auth_key#dh-exchange-initiation).
    pub nonce: i128,
    /// Value received from server in [Step 2](https://core.telegram.org/mtproto/auth_key#dh-exchange-initiation).
    pub server_nonce: i128,
    /// First prime cofactor.
    pub p: BytesMut,
    /// Second prime cofactor.
    pub q: BytesMut,
    /// Public key fingerprint.
    pub public_key_fingerprint: i64,
    /// Encrypted data.
    pub encrypted_data: BytesMut,
}

impl TypeId for req_DH_params {
    fn type_id2() -> u32 {
        0xd712e4be
    }
}
